<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Evert Timberg</title>
    <link>https://everttimberg.io/</link>
    <description>Recent content on Evert Timberg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Feb 2020 20:57:00 -0400</lastBuildDate>
    
	<atom:link href="https://everttimberg.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chart.js</title>
      <link>https://everttimberg.io/projects/chartjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://everttimberg.io/projects/chartjs/</guid>
      <description>Since late 2014, I have been involved with Chart.js. I am currently a maintainer of the library and have helped it grow and mature.

It&amp;rsquo;s been a great adventure, and my first experience with open-source development. It&amp;rsquo;s scary at times to think that my code gets so much use. Chart.js was also my first experience using the HTML 5 Canvas APIs, but it felt quite natural coming from C++ code that made use of Windows GDI APIs.</description>
    </item>
    
    <item>
      <title>RNA Binding Site App</title>
      <link>https://everttimberg.io/projects/rna-binding-site-finder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://everttimberg.io/projects/rna-binding-site-finder/</guid>
      <description>This was a quick tool I wrote for my wife. It allows the user to search a sequence of RNA for locations that could potentially bind with the search sequence. It has options to allow for partial matches where only part of the string matches a location in the RNA sequence.

Correlation with RNA Secondary Structure By using the secondary structure configuration, it&amp;rsquo;s possible to correlate matches against locations that are single stranded.</description>
    </item>
    
    <item>
      <title>Exploring Toronto</title>
      <link>https://everttimberg.io/photography/exploring-toronto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://everttimberg.io/photography/exploring-toronto/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Spain - 2013</title>
      <link>https://everttimberg.io/photography/spain-2013/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://everttimberg.io/photography/spain-2013/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Riomaggiore - 2013</title>
      <link>https://everttimberg.io/photography/riomaggiore-2013/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://everttimberg.io/photography/riomaggiore-2013/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Naples and Florence - 2013</title>
      <link>https://everttimberg.io/photography/naples-and-florence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://everttimberg.io/photography/naples-and-florence/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Circuit Breakers in Python</title>
      <link>https://everttimberg.io/blog/python-circuit-breaker/</link>
      <pubDate>Tue, 18 Feb 2020 20:57:00 -0400</pubDate>
      
      <guid>https://everttimberg.io/blog/python-circuit-breaker/</guid>
      <description>The Circuit Breaker pattern is commonly used in microservice architectures to fail quickly when an external service is down. This prevents a single service from bringing down the entire system and allows functionality to gracefully degrade.
I spent part of the last weekend building my own version of a circuit breaker. There are already many existing implementations in Python, however there were a few things I wanted in a circuit breaker implementation that I couldn&amp;rsquo;t seem to find.</description>
    </item>
    
    <item>
      <title>Self Documenting APIs with Flask and Swagger</title>
      <link>https://everttimberg.io/blog/flask-api-spec/</link>
      <pubDate>Thu, 24 Oct 2019 20:06:03 -0400</pubDate>
      
      <guid>https://everttimberg.io/blog/flask-api-spec/</guid>
      <description>Flask is a simple Python framework for creating web applications. It can be used to create API servers in a microservices architecture. When doing so, it is helpful to provide API documentation that ships with your service. This post outlines a technique for shipping OpenAPI v3 documentation from your service while co-locating the documentation with the API implementation.
Keeping the documentation with the route definition ensures that it is easy to update, updates can be clearly identified during code review, and it helps to onboard new developers to a project.</description>
    </item>
    
    <item>
      <title>About this Site</title>
      <link>https://everttimberg.io/blog/welcome/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://everttimberg.io/blog/welcome/</guid>
      <description>Welcome to my personal site. I wrote the site using Hugo, a static site generator written in Go. It&amp;rsquo;s been a great introduction to the Go template language. Hosting is done via static files published to Github pages. The theme for this site is based on a modified version of the Introduction theme.</description>
    </item>
    
    <item>
      <title>Profiling Python Code with QCacheGrind</title>
      <link>https://everttimberg.io/blog/python-profiling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://everttimberg.io/blog/python-profiling/</guid>
      <description>Profiling is the first step to improving the performance of code. Suppose we want to profile the Python script below which is based on the example here. It prints out the first 20 Fibonacci numbers and is unoptimized to make the profile exaggerated.
def fib(n):if n == 0:return 0elif n == 1:return 1else:return fib(n-1) + fib(n-2)def fib_seq(n):seq = [ ]if n &amp;gt; 0:seq.</description>
    </item>
    
    <item>
      <title>RNA Binding Site Finder</title>
      <link>https://everttimberg.io/app/rna/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://everttimberg.io/app/rna/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>