<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Evert Timberg</title>
    <link>https://everttimberg.io/project/</link>
    <description>Recent content in Projects on Evert Timberg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://everttimberg.io/project/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Chart.js</title>
      <link>https://everttimberg.io/project/chartjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://everttimberg.io/project/chartjs/</guid>
      <description>&lt;p&gt;Since late 2014, I have been involved with &lt;a href=&#34;http://www.chartjs.org&#34;&gt;Chart.js&lt;/a&gt;. I am currently, along with Tanner Linsley, one of the primary contributors and was responsible for a number of the big developments in version 2.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
It&amp;rsquo;s been a great adventure, and my first experience with open-source development. It&amp;rsquo;s scary at times to think that my code gets 50k+ downloads a month. Chart.js was also my first experience using the HTML 5 Canvas APIs, but it felt quite natural coming from C++ code that made use of Windows &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/dd145203(v=vs.85).aspx&#34;&gt;GDI&lt;/a&gt; APIs. A lot of the tricks used to improve canvas performance are similar to the tricks done in legacy GDI code.&lt;/p&gt;

&lt;div class=&#34;chart-container&#34;&gt;
	&lt;canvas id=&#34;line-chart&#34; class=&#34;large-chart&#34;&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;script&gt;
var ctx = document.getElementById(&#34;line-chart&#34;).getContext(&#39;2d&#39;);
var chartInstance = new Chart(ctx, 
{
    type: &#39;line&#39;,
    data: {
        datasets: [{
            data: [10, 20, 30],
            label: &#39;Dataset 1&#39;,
            borderColor: &#39;#36A2EB&#39;,
            pointBackgroundColor: &#39;#36A2EB&#39;,
            backgroundColor: &#39;rgba(54,162,235, 0.4)&#39;
        }, {
            data: [30, 20, 15],
            label: &#39;Dataset 2&#39;,
            borderColor: &#39;rgb(255,99,132)&#39;,
            pointBackgroundColor: &#39;rgb(255,99,132)&#39;,
            backgroundColor: &#39;rgba(255,99,132, 0.4)&#39;
        }],
        labels: [&#39;Label 1&#39;, &#39;Label 2&#39;, &#39;Label 3&#39;]
    },
    options: {
        tooltips: {
            mode: &#39;label&#39;
        },
        responsiveAnimationDuration: 0
    }
}
);
&lt;/script&gt;

&lt;p&gt;In addition to feature work, I added most of the initial tests to the project. I added the infrastructure to get tests and coverage analysis running. I enjoy adding and improving tests when writing features.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RNA Binding Site Finder</title>
      <link>https://everttimberg.io/project/rna-binding-site-finder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://everttimberg.io/project/rna-binding-site-finder/</guid>
      <description>

&lt;p&gt;This was a quick tool I wrote for a friend. It allows the user to search a sequence of RNA for locations that could potentially bind with the search sequence. It has options to allow for partial matches where only part of the string matches a location in the RNA sequence.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;correlation-with-rna-secondary-structure&#34;&gt;Correlation with RNA Secondary Structure&lt;/h2&gt;

&lt;p&gt;By using the secondary structure configuration, it&amp;rsquo;s possible to correlate matches against locations that are single stranded. If secondary structures are added, they need to be added in a Vienna syntax. Matches are reported including the number of single stranded bases in the match.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
You can try the app &lt;a href=&#34;https://everttimberg.io/app/rna/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chart.js Zoom Plug-In</title>
      <link>https://everttimberg.io/project/chart.zoom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://everttimberg.io/project/chart.zoom/</guid>
      <description>&lt;p&gt;In early May 2016, I wrote a &lt;a href=&#34;https://github.com/chartjs/Chart.Zoom.js&#34;&gt;Zoom and Pan plugin&lt;/a&gt; to work with the new plugin system introduced in Chart.js v2.1.0. The plugin is touch ready and allows the use of gestures, such as pinch, to zoom the chart. Take a look at the chart below and try it out!&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
In the future I think the zoom plugin will make a good reference as to what plugins can look like. It&amp;rsquo;s already help other to create plugins for Chart.js including a great one for &lt;a href=&#34;https://github.com/bbc/Chart.Bands.js&#34;&gt;creating gradient fills&lt;/a&gt; based on scale values. I&amp;rsquo;m looking forward to what the community can build over time.&lt;/p&gt;

&lt;div class=&#34;chart-container&#34;&gt;
	&lt;canvas id=&#34;zoom-chart&#34; class=&#34;large-chart&#34;&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;script&gt;
var ctx = document.getElementById(&#34;zoom-chart&#34;).getContext(&#39;2d&#39;);
var chartInstance = new Chart(ctx, 
{
    type: &#39;scatter&#39;,
    data: {
        datasets: [{
            data: [{
                x: -100,
                y: 0
            }, {
                x: 0,
                y: 50
            }, {
                x: 75,
                y: 75
            }, {
                x: 0,
                y: -50
            }],
            label: &#39;Dataset 1&#39;,
            borderColor: &#39;#36A2EB&#39;,
            pointBackgroundColor: &#39;#36A2EB&#39;,
            backgroundColor: &#39;rgba(54,162,235, 0.4)&#39;
        }]
    },
    options: {
        title: {
            display: true,
            text: &#39;Scatter Chart with Zoom and Pan&#39;
        },
        scales: {
            xAxes: [{
                position: &#39;bottom&#39;,
                gridLines: {
                    zeroLineColor: &#34;rgba(0,255,0,1)&#34;
                },
                ticks: {
                    maxRotation: 0,
                    callback: function(tick) {
                        return tick.toFixed(1);
                    }
                }
            }],
            yAxes: [{
                position: &#39;left&#39;,
                gridLines: {
                    zeroLineColor: &#34;rgba(0,255,0,1)&#34;
                },
                ticks: {
                    reverse: true,
                    callback: function(tick) {
                        return tick.toFixed(1);
                    }
                }
            }]
        },
        pan: {
            enabled: true,
            mode: &#39;xy&#39;
        },
        zoom: {
            enabled: true,
            mode: &#39;xy&#39;,
            limits: {
                max: 10,
                min: 0.5
            }
        }
    }
}
);
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Smith Charts with Chart.js</title>
      <link>https://everttimberg.io/project/chart.smith/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://everttimberg.io/project/chart.smith/</guid>
      <description>&lt;p&gt;Back when I was in university, I used Smith Charts all the time to visualize transmission line network matching. There aren&amp;rsquo;t many web ways of creating one, so I took a stab at it.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
The charts turned out surprisingly well. I found it much easier to do a lot of the scale work in a circular coordinate system with a final conversion to cartesian coordinates at the end.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
Building on the theme of reusable Chart components in Chart.js v2, I was able to reuse most of the existing functionality from the line chart controller. I hope in the future I can clean up the code for the Smith Chart and make it a good reference design for what extensions can look like.&lt;/p&gt;

&lt;div class=&#34;chart-container&#34;&gt;
	&lt;canvas id=&#34;smith-chart&#34; class=&#34;extra-large-chart&#34;&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;script&gt;
var ctx = document.getElementById(&#34;smith-chart&#34;).getContext(&#39;2d&#39;);
var chartInstance = new Chart(ctx, 
{
    type: &#39;smith&#39;,
    data: {
        datasets: [{
            data: [{
                real: 0.1,
                imag: 0
            }, {
                real: 1,
                imag: 0
            }, {
                real: 0,
                imag: -1
            }, {
                real: 20,
                imag: 0
            }],
            label: &#39;Dataset 1&#39;,
            borderColor: &#39;#36A2EB&#39;,
            pointBackgroundColor: &#39;#36A2EB&#39;,
            backgroundColor: &#39;rgba(54,162,235, 0.4)&#39;
        }]
    },
    options: {
        title: {
            display: true,
            text: &#39;Smith Chart Extension&#39;
        },
        legend: {
            display: false
        }
    }
}
);
&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>